diff --git a/include/CoCoA/TmpGPoly.H b/include/CoCoA/TmpGPoly.H
index 4c4d51e..8216570 100644
--- a/include/CoCoA/TmpGPoly.H
+++ b/include/CoCoA/TmpGPoly.H
@@ -29,6 +29,7 @@
 #include "CoCoA/TmpGTypes.H"
 #include "CoCoA/utils.H"
 
+#include<functional>
 #include<list>
 // using std::list; // for GPolyList; GPolyPtrList;
 #include<vector>
@@ -46,6 +47,11 @@ enum ClearMarker {clear};
 
 class GPoly;
 
+extern bool handlersInited;
+extern std::function<void(const GPoly *p, const GPoly*q, const GPoly*s)> sPolyHandler;
+extern std::function<void(const GPoly *p)> reductionStartHandler;
+extern std::function<void(const GPoly *q)> reductionStepHandler;
+extern std::function<void(const GPoly *r)> reductionEndHandler;
 
 typedef std::list<GPoly> GPolyList;
 
diff --git a/src/AlgebraicCore/SparsePolyOps-reduce.C b/src/AlgebraicCore/SparsePolyOps-reduce.C
index b5b8b43..bee212f 100644
--- a/src/AlgebraicCore/SparsePolyOps-reduce.C
+++ b/src/AlgebraicCore/SparsePolyOps-reduce.C
@@ -134,6 +134,7 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
       v.myGRingInfo().myCheckForTimeout("ReduceActiveLM");
       s->myUpdate(F, *g);
       F->myReduce(poly(*g), NumTerms(*g));
+      if ( handlersInited ) reductionStepHandler(g);
     }//while
   }//ReduceActiveLM
 
@@ -269,6 +270,7 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
   void GPoly::myReduce(const Reductors& theReductors)
   {
     if ( IsZero(*this) ) return;
+    if ( handlersInited ) reductionStartHandler(this);
     ReductionCog F = ChooseReductionCogGeobucket(myGRingInfo());
     F->myAssignReset(myPolyValue, myNumTerms); // myPolyValue gets 0
     reduce(F, mySugar, theReductors); // mySugar updated
@@ -278,6 +280,7 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
     if ( !IsZero(*this) && !IsOne(myLCValue) ) // makes myPolyValue monic
       if ( myGRingInfo().myCoeffRingType()==CoeffEncoding::Field )
         myGRingInfo().myNewSPR()->myDivByCoeff(raw(myPolyValue), raw(myLCValue));
+    if ( handlersInited ) reductionEndHandler(this);
     // if CoeffEncoding::Field myRelease does NOT make poly monic
     // if CoeffEncoding::FrFldOfGCDDomain myRelease makes poly content free
   }
diff --git a/src/AlgebraicCore/TmpGPoly.C b/src/AlgebraicCore/TmpGPoly.C
index ea250d4..ed2b41d 100644
--- a/src/AlgebraicCore/TmpGPoly.C
+++ b/src/AlgebraicCore/TmpGPoly.C
@@ -47,6 +47,11 @@ using std::vector;
 namespace CoCoA
 {  
 
+  bool handlersInited = false;
+  std::function<void(const GPoly *p, const GPoly*q, const GPoly*s)> sPolyHandler = nullptr;
+  std::function<void(const GPoly *p)> reductionStartHandler = nullptr;
+  std::function<void(const GPoly *q)> reductionStepHandler = nullptr;
+  std::function<void(const GPoly *r)> reductionEndHandler = nullptr;
 
   //---------class GPoly-------------------------------
 
@@ -301,7 +306,10 @@ void GPoly::myUpdateLenLPPLCDegComp()
     if (the_gp.IsInputPoly())
       myPolyValue = poly(the_gp.myFirstGPoly());
     else
+    {
       myPolySetSPoly(the_gp.myFirstGPoly(), the_gp.mySecondGPoly());
+      if ( handlersInited ) sPolyHandler(&the_gp.myFirstGPoly(), &the_gp.mySecondGPoly(), this);
+    }
     myUpdateLenLPPLCDegComp();
     myAge = the_age;
     // MAX: do these things only if necessary.
