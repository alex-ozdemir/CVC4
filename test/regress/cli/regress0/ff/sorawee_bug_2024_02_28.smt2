; Command line: cvc5-ff-range --ff-bitsum --ff-solver int "$@"
(set-logic QF_FF)
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(define-sort F () (_ FiniteField 21888242871839275222246405745257275088548364400416034343698204186575808495617))
; ======== p definitions ========
(declare-const p F)
(assert (= p #f21888242871839275222246405745257275088548364400416034343698204186575808495617m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps1 F)
(assert (= ps1 #f21888242871839275222246405745257275088548364400416034343698204186575808495616m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps2 F)
(assert (= ps2 #f21888242871839275222246405745257275088548364400416034343698204186575808495615m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps3 F)
(assert (= ps3 #f21888242871839275222246405745257275088548364400416034343698204186575808495614m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps4 F)
(assert (= ps4 #f21888242871839275222246405745257275088548364400416034343698204186575808495613m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps5 F)
(assert (= ps5 #f21888242871839275222246405745257275088548364400416034343698204186575808495612m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const zero F)
(assert (= zero #f0m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const one F)
(assert (= one #f1m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; ================================
; ======== original block ========
; ================================
; ======== declaration constraints ========
(declare-const x0 F)
(declare-const x1 F)
(declare-const x2 F)
(declare-const x3 F)
(declare-const x4 F)
(declare-const x5 F)
(declare-const x6 F)
(declare-const x7 F)
(declare-const x8 F)
(declare-const x9 F)
; ======== main constraints ========
(assert (= (ff.mul ps1 (ff.mul x1 x5)) (ff.add ps1 x4)))
(assert (= (ff.mul x1 x4) zero))
(assert (= (ff.mul x3 x1) x8))
(assert (= x8 (ff.add (ff.mul #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617 x6) x7)))
(assert (= (ff.add x4 (ff.mul ps1 (ff.mul x4 x4))) zero))
(assert (= (ff.add ps1 (ff.add x7 (ff.add x4 (ff.mul ps1 (ff.mul x4 x7))))) x9))
(assert (= (ff.add one x9) one))
(assert (= (ff.add one (ff.mul ps1 x4)) zero))
(assert (= x3 x2))
(assert (= #f1m21888242871839275222246405745257275088548364400416034343698204186575808495617 x0))
; ===================================
; ======== alternative block ========
; ===================================
; ======== declaration constraints ========
(declare-const y0 F)
(declare-const y1 F)
(declare-const y2 F)
(declare-const y3 F)
(declare-const y4 F)
(declare-const y5 F)
(declare-const y6 F)
(declare-const y7 F)
(declare-const y8 F)
(declare-const y9 F)
; ======== main constraints ========
(assert (= (ff.mul ps1 (ff.mul y1 y5)) (ff.add ps1 y4)))
(assert (= (ff.mul y1 y4) zero))
(assert (= (ff.mul y3 y1) y8))
(assert (= y8 (ff.add (ff.mul #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617 y6) y7)))
(assert (= (ff.add y4 (ff.mul ps1 (ff.mul y4 y4))) zero))
(assert (= (ff.add ps1 (ff.add y7 (ff.add y4 (ff.mul ps1 (ff.mul y4 y7))))) y9))
(assert (= (ff.add one y9) one))
(assert (= (ff.add one (ff.mul ps1 y4)) zero))
(assert (= y3 y2))
(assert (= #f1m21888242871839275222246405745257275088548364400416034343698204186575808495617 y0))
; ====================================
; ======== precondition block ========
; ====================================
; precondition tag: extra constraint
(assert (ff.lt x1 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y1 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x3 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y3 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x6 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y6 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x7 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y7 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x1 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y1 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x3 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y3 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x6 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y6 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x7 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y7 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x1 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y1 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x3 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y3 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x6 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y6 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; precondition tag: extra constraint
(assert (ff.lt x7 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
(assert (ff.lt y7 #f18446744069414584321m21888242871839275222246405745257275088548364400416034343698204186575808495617))
; ========================================
; ======== extra constraint block ========
; ========================================
; =============================
; ======== known block ========
; =============================
(assert (= x0 y0))
(assert (= x1 y1))
(assert (= x4 y4))
(assert (= x6 y6))
(assert (= x7 y7))
(assert (= x8 y8))
(assert (= x9 y9))
; =============================
; ======== query block ========
; =============================
(assert (not (= x3 y3)))
(check-sat)
(get-model)
