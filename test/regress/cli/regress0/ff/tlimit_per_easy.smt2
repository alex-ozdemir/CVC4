; REQUIRES: cocoa
; COMMAND-LINE: --tlimit-per 500 --incremental --ff-solver gb
; EXPECT: unknown
; EXPECT: unsat
(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FF)
(define-sort F () (_ FiniteField 21888242871839275222246405745257275088548364400416034343698204186575808495617))
(define-fun b_to_f ((b Bool)) F (ite b (as ff1 F) (as ff1 F)))
(define-fun f_to_b ((f F)) Bool (not (= f (as ff0 F))))
(define-fun is_bit ((f F)) Bool (= (ff.mul f f ) f))
(declare-fun b0 () F)
(declare-fun b1 () F)
(declare-fun b2 () F)
(declare-fun b3 () F)
(declare-fun b4 () F)
(declare-fun b5 () F)
(declare-fun b6 () F)
(declare-fun b7 () F)
(declare-fun b8 () F)
(declare-fun b9 () F)
(declare-fun b10 () F)
(declare-fun b11 () F)
(declare-fun b12 () F)
(declare-fun b13 () F)
(declare-fun b14 () F)
(declare-fun b15 () F)
(declare-fun b16 () F)
(declare-fun b17 () F)
(declare-fun b18 () F)
(declare-fun b19 () F)
(declare-fun b20 () F)
(declare-fun b21 () F)
(declare-fun b22 () F)
(declare-fun b23 () F)
(declare-fun b24 () F)
(declare-fun b25 () F)
(declare-fun b26 () F)
(declare-fun b27 () F)
(declare-fun b28 () F)
(declare-fun b29 () F)

(push)
(assert (not (=>
  (and (is_bit b0)
       (is_bit b1)
       (is_bit b2)
       (is_bit b3)
       (is_bit b4)
       (is_bit b5)
       (is_bit b6)
       (is_bit b7)
       (is_bit b8)
       (is_bit b9)
       (is_bit b10)
       (is_bit b11)
       (is_bit b12)
       (is_bit b13)
       (is_bit b14)
       (is_bit b15)
       (is_bit b16)
       (is_bit b17)
       (is_bit b18)
       (is_bit b19)
       (is_bit b20)
       (is_bit b21)
       (is_bit b22)
       (is_bit b23)
       (is_bit b24)
       (is_bit b25)
       (is_bit b26)
       (is_bit b27)
       (is_bit b28)
       (is_bit b29)
       (= (ff.bitsum b0 b1 b2 b3 b4 b5 b6 b7 b8 b9) (as ff0 F)))
  (= b0 (as ff0 F))
)))
(check-sat)
(pop)

(push)
(assert (not (=>
  (and (is_bit b0)
       (is_bit b1)
       (is_bit b2)
       (is_bit b3)
       (is_bit b4)
       (is_bit b5)
       (is_bit b6)
       (is_bit b7)
       (is_bit b8)
       (is_bit b9)
       (is_bit b10)
       (is_bit b11)
       (is_bit b12)
       (is_bit b13)
       (is_bit b14)
       (is_bit b15)
       (is_bit b16)
       (is_bit b17)
       (is_bit b18)
       (is_bit b19)
       (is_bit b20)
       (is_bit b21)
       (is_bit b22)
       (is_bit b23)
       (is_bit b24)
       (is_bit b25)
       (is_bit b26)
       (is_bit b27)
       (is_bit b28)
       (is_bit b29)
       (= (ff.bitsum b0 b1 b2) (as ff0 F)))
  (= b0 (as ff0 F))
)))
(check-sat)
(pop)
